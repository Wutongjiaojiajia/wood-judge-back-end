# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI
on:
  push:
    # 只有当推送代码到mater分支才执行
    branches: 
      - master
jobs:
  # 创建一个执行测试CI工作流
  build:
    # 跑在哪个系统上
    runs-on: ubuntu-latest
    container: node:12.16-alpine
    steps:
    # 官方提供的actions复制代码到Github服务器上
    - name: Checkout repository code
      uses: actions/checkout@v2
    # 创建使用缓存（使用缓存可加速工作流的执行）
    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    # 安装依赖
    - name: Install Dependencies
      run: npm install
  # 添加一个工作打包应用的Docker镜像
  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 官方提供的actions复制代码到Github服务器上
      - name: Checkout repository code
        uses: actions/checkout@v2
      # 打包镜像
      - name: Build & Push container image
        uses: mr-smithers-excellent/docker-build-push@v2
        with:
          image: wutongjiaojiajia/wood-judge-back-end
          tag: master
          registry: registry.cn-shenzhen.aliyuncs.com
          username: ${{ secrets.ALIYUN_DOCKER_USERNAME }}
          password: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}
  # 添加一个工作来自动部署
  deploy:
    runs-on: [self-hosted,linux]
    needs: package
    env:
      CONTAINER_IMAGE: wutongjiaojiajia/wood-judge-back-end:master
      CONTAINER_NAME: wood-judge-back-end
    steps:
      # 拉取镜像
      - name: Docker pull image
        run: docker image pull $CONTAINER_IMAGE
      # 停止容器
      - name: Docker stop container
        run: docker container stop $CONTAINER_NAME
      # 删除容器
      - name: Docker remove container
        if: always()
        run: docker container rm -f $CONTAINER_NAME
      # 运行容器 映射端口
      - name: Docker run container
        if: always()
        run: docker container run --name $CONTAINER_NAME -d -p 8000:3000 $CONTAINER_IMAGE
      # 清理残存一些临时的、没有被使用的镜像文件
      - name: Prune images
        if: always()
        run: docker image prune -f

      
